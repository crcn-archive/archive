package com.ei.loaders{		import com.ei.events.FileEvent;		import flash.display.Loader;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.ProgressEvent;	import flash.net.URLRequest;	import flash.system.ApplicationDomain;	import flash.system.LoaderContext;	import flash.utils.ByteArray;		public class MediaLoader extends EventDispatcher implements ILoader	{		//-----------------------------------------------------------		// 		//Private Variables		//		//-----------------------------------------------------------				private var _loader:Loader;		private var _request:URLRequest;		private var _loaded:Boolean;				private var _initialized:Boolean;		private var _register:Boolean;				private var _name:String;				//-----------------------------------------------------------		// 		//Constructor		//		//-----------------------------------------------------------				/**		*/						public function MediaLoader(name:String = "", registerLoader:Boolean = true)		{			_name 		  = name;			_loader 	  = new Loader();			_register	  = registerLoader;			_request 	  = new URLRequest();		}				//-----------------------------------------------------------		// 		//Getters / Setters		//		//-----------------------------------------------------------				/**		*/				public function get loaded():Boolean		{			return _loaded;		}				/**		*/				public function get bytesLoaded():int		{			return _loader.contentLoaderInfo.bytesLoaded;		}				/**		*/				public function get bytesTotal():int		{			return _loader.contentLoaderInfo.bytesTotal;		}				/**		*/				public function get initialized():Boolean		{			return _initialized;		}				/**		*/				public function get data():Object		{			return _loader;		}				/**		 */				public function get loadInstance():Loader		{			return _loader;		}				/**		*/				public function get name():String		{			return _name;		}				public function get request():URLRequest		{			return _request;		}						//-----------------------------------------------------------		// 		// Public Methods		//		//-----------------------------------------------------------				/**		*called within LoaderList to initialize this and any other objects at the same time		*/				public function startLoader():void		{			start();			//so we can access class files			var context:LoaderContext = new LoaderContext();			context.applicationDomain = new ApplicationDomain(ApplicationDomain.currentDomain);			context.checkPolicyFile = true;									loadData(_request,context);								}				/**		 */		public function start():void		{			_loader.contentLoaderInfo.addEventListener(Event.COMPLETE,onLoadComplete);			_loader.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS,onProgressEvent);						_initialized = true;		}				/**		*/				public function load(url:String):void		{			//do not initialize the application, rather, create a mask so it can easily be changed if needed			_request.url = url;						//just like regular load, nothin initializes before load is called.			//we need to give this object a chance to add any EventListeners before 			//we byt it in the loadMananger						startLoader();		}								//-----------------------------------------------------------		// 		// Protected Methods		//		//-----------------------------------------------------------				/**		*/				protected function onLoadComplete(event:Event):void		{			//since sometimes the totalBytes are unknown, it's best to have a boolean load value			_loaded = true;						//dispatch the FileEvent telling the application this is done			dispatchEvent(new FileEvent(FileEvent.COMPLETE));						//remove the event listener for onComplete and progress to save space and memory			_loader.removeEventListener(Event.COMPLETE,onLoadComplete);			_loader.removeEventListener(ProgressEvent.PROGRESS,onProgressEvent);					}				/**		*/				protected function onProgressEvent(event:ProgressEvent):void		{			dispatchEvent(new FileEvent(FileEvent.PROGRESS));		}				protected function loadData(url:URLRequest,context:LoaderContext = null):void		{			_loader.load(url,context);		}			}		}